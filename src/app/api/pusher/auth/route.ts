// src/app/api/pusher/auth/route.ts
import { pusherServer } from '@/lib/pusher/server';
import { getAuthSession } from '@/lib/auth';
import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
  console.log('üîê [PUSHER-AUTH] === DEBUT AUTHENTIFICATION ===');
  try {
    const session = await getAuthSession();
    console.log('üîê [PUSHER-AUTH] Session:', session ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e');
    
    if (!session?.user?.id) {
      console.error('‚ùå [PUSHER-AUTH] Authentification √©chou√©e: Non autoris√© (pas de session)');
      return new NextResponse('Unauthorized', { status: 401 });
    }

    const data = await req.text();
    const params = new URLSearchParams(data);
    
    const socketId = params.get('socket_id');
    const channel = params.get('channel_name');

    console.log('üîê [PUSHER-AUTH] Donn√©es re√ßues:', { 
      socketId,
      channel,
      userId: session.user.id 
    });

    if (!socketId || !channel) {
       console.error('‚ùå [PUSHER-AUTH] Authentification √©chou√©e: Mauvaise requ√™te (socketId ou channel manquant)');
      return new NextResponse('Bad Request', { status: 400 });
    }

    // Pour les canaux priv√©s, l'authentification est suffisante.
    const authResponse = pusherServer.authorizeChannel(socketId, channel);
    
    console.log(`‚úÖ [PUSHER-AUTH] Autorisation r√©ussie pour l'utilisateur ${session.user.id} sur le canal ${channel}`);
    return new NextResponse(JSON.stringify(authResponse));
  } catch (error) {
    console.error('üí• [PUSHER-AUTH] Erreur critique durant l\'authentification:', error);
    return new NextResponse('Internal Server Error', { status: 500 });
  }
}
