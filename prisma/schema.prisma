// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// User model
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  role              Role      @default(ELEVE)
  ambition          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  classeId          String?
  classe            Classe?   @relation(fields: [classeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  sessions          Session[] @relation("SessionParticipants")
  sessionsCrees     Session[] @relation("SessionTeacher")
  messages          Message[]
  reactions         Reaction[]
  etat              EtatEleve?
  classesEnseignees Classe[]  @relation("ProfesseurClasses")
}

enum Role {
  ELEVE
  PROFESSEUR
}

// Class model
model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeur   User      @relation("ProfesseurClasses", fields: [professeurId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  professeurId String
  eleves       User[]
  chatroom     Chatroom? @relation(fields: [chatroomId], references: [id])
  chatroomId   String?   @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  etats       EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  eleveId    String  @unique
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
  isPunished Boolean @default(false)
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  endedAt      DateTime?
  professeurId String
  professeur   User     @relation("SessionTeacher", fields: [professeurId], references: [id])
  participants User[]   @relation("SessionParticipants")
}

model Chatroom {
  id        String    @id @default(cuid())
  classe    Classe?
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id          String     @id @default(cuid())
  message     String
  sender      User       @relation(fields: [senderId], references: [id])
  senderId    String
  senderName  String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id])
  chatroomId  String
  createdAt   DateTime   @default(now())
  reactions   Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
}
