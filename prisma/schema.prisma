generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  PROFESSEUR
  ELEVE
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  name            String?
  ambition        String?
  role            Role
  classeId        String?
  classeEnseignee Classe?     @relation("ProfesseurClasse")
  classe          Classe?     @relation("ElevesClasse", fields: [classeId], references: [id])
  messages        Message[]   @relation("AuteurMessage")
  etat            EtatEleve?
  reactions       Reaction[]  @relation("AuteurReaction")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeurId String    @unique
  professeur   User      @relation("ProfesseurClasse", fields: [professeurId], references: [id])
  eleves       User[]    @relation("ElevesClasse")
  chatroomId   String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Metier {
  id          String   @id @default(cuid())
  nom         String   @unique
  description String
  theme       Json
  etats       EtatEleve[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EtatEleve {
  id         String   @id @default(cuid())
  eleveId    String   @unique
  eleve      User     @relation(fields: [eleveId], references: [id])
  metierId   String?
  metier     Metier?  @relation(fields: [metierId], references: [id])
  isPunished Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Chatroom {
  id        String    @id @default(cuid())
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id          String     @id @default(cuid())
  message     String
  auteurId    String
  auteur      User       @relation("AuteurMessage", fields: [auteurId], references: [id])
  chatroomId  String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id])
  reactions   Reaction[]
  createdAt   DateTime   @default(now())
  senderName  String
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  auteurId  String
  auteur    User     @relation("AuteurReaction", fields: [auteurId], references: [id])
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  createdAt DateTime @default(now())
}
