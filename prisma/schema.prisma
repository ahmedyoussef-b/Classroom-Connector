// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  name            String?
  role            Role         @default(ELEVE)
  ambition        String?
  classeEnseignee Classe[]     @relation("ProfesseurToClasse")
  classe          Classe?      @relation("EleveToClasse", fields: [classeId], references: [id])
  classeId        String?
  messages        Message[]    @relation("AuteurToMessage")
  etat            EtatEleve?   @relation("EleveToEtat")
  reactions       Reaction[]   @relation("AuteurToReaction")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Classe {
  id              String       @id @default(cuid())
  nom             String
  professeur      User         @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  professeurId    String
  eleves          User[]       @relation("EleveToClasse")
  chatroomId      String       @unique @default(cuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Metier {
  id              String       @id @default(cuid())
  nom             String
  description     String
  theme           Json
  etats           EtatEleve[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model EtatEleve {
  id              String       @id @default(cuid())
  eleve           User         @relation("EleveToEtat", fields: [eleveId], references: [id])
  eleveId         String       @unique
  metier          Metier?      @relation(fields: [metierId], references: [id])
  metierId        String?
  isPunished      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Message {
  id              String       @id @default(cuid())
  message         String
  senderId        String
  senderName      String
  chatroomId      String
  auteur          User         @relation("AuteurToMessage", fields: [senderId], references: [id])
  reactions       Reaction[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Reaction {
  id              String       @id @default(cuid
())
  emoji           String
  message         Message      @relation(fields: [messageId], references: [id])
  messageId       String
  auteur          User         @relation("AuteurToReaction", fields: [userId], references: [id])
  userId          String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum Role {
  ELEVE
  PROFESSEUR
}
