// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  role              Role
  ambition          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  classeId          String?
  classe            Classe?   @relation(fields: [classeId], references: [id])
  etat              EtatEleve?
  messages          Message[]
  reactions         Reaction[]
  classesEnseignees Classe[]  @relation("ClasseProfesseur")

  // Relations pour les sessions
  sessionsEnseignees Session[] @relation("SessionProfesseur")
  sessions           Session[] @relation("SessionParticipants")
}

model Classe {
  id           String  @id @default(cuid())
  nom          String
  professeur   User    @relation("ClasseProfesseur", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  chatroom     Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId   String   @unique
}

model EtatEleve {
  id         String   @id @default(cuid())
  eleve      User     @relation(fields: [eleveId], references: [id])
  eleveId    String   @unique
  isPunished Boolean
  metier     Metier?  @relation(fields: [metierId], references: [id])
  metierId   String?
  updatedAt  DateTime @updatedAt
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json
  eleves      EtatEleve[]
}

model Chatroom {
  id        String    @id @default(cuid())
  messages  Message[]
  Classe    Classe?
}

model Message {
  id          String     @id @default(cuid())
  message     String
  sender      User       @relation(fields: [senderId], references: [id])
  senderId    String
  senderName  String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id])
  chatroomId  String
  createdAt   DateTime   @default(now())
  reactions   Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references- [id])
  messageId String
  createdAt DateTime @default(now())

  @@unique([emoji, userId, messageId])
}

model Session {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  endedAt      DateTime?
  professeur   User      @relation("SessionProfesseur", fields: [professeurId], references: [id])
  professeurId String
  participants User[]    @relation("SessionParticipants")
}


enum Role {
  ELEVE
  PROFESSEUR
}
