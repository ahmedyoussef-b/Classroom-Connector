// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  nom            String
  email          String      @unique
  role           Role
  classeEnseignee Classe?     @relation("ProfesseurClasse")
  classeEleve    Classe?     @relation("ElevesClasse", fields: [classeId], references: [id])
  classeId       String?
  etatEleve      EtatEleve?
  messages       Message[]
  reactions      Reaction[]
}

enum Role {
  PROFESSEUR
  ELEVE
}

model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeurId String    @unique
  professeur   User      @relation("ProfesseurClasse", fields: [professeurId], references: [id])
  eleves       User[]    @relation("ElevesClasse")
  chatroom     Chatroom?
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  theme       Json // Regroupe backgroundColor, backgroundImage, etc.
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  isPunished Boolean @default(false)
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id])
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
}

model Chatroom {
  id        String    @id @default(cuid())
  classeId  String    @unique
  classe    Classe    @relation(fields: [classeId], references: [id])
  messages  Message[]
}

model Message {
  id          String     @id @default(cuid())
  contenu     String
  timestamp   DateTime   @default(now())
  auteurId    String
  auteur      User       @relation(fields: [auteurId], references: [id])
  chatroomId  String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id])
  reactions   Reaction[]
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
  auteurId  String
  auteur    User    @relation(fields: [auteurId], references: [id])

  @@unique([messageId, auteurId, emoji])
}
