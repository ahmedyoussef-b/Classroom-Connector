// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  role             Role
  ambition         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  classeId         String?
  classe           Classe?   @relation(fields: [classeId], references: [id], onDelete: Cascade)
  classesEnseignees Classe[]  @relation("ProfesseurToClasse")
  etat             EtatEleve?
  messages         Message[]
  reactions        Reaction[]
  sessions         Session[] @relation("SessionToParticipant")
}

model Classe {
  id           String  @id @default(cuid())
  nom          String
  professeurId String
  professeur   User    @relation("ProfesseurToClasse", fields: [professeurId], references: [id])
  eleves       User[]
  chatroomId   String  @unique
  chatroom     Chatroom @relation(fields: [chatroomId], references: [id])

  @@index([professeurId])
}

model Metier {
  id          String      @id @default(cuid())
  nom         String      @unique
  description String
  icon        String?
  theme       Json
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  eleve      User    @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  metierId   String?
  metier     Metier? @relation(fields: [metierId], references: [id])
  isPunished Boolean @default(false)

  @@index([eleveId])
  @@index([metierId])
}

model Chatroom {
  id       String    @id @default(cuid())
  classe   Classe?
  messages Message[]
}

model Message {
  id          String     @id @default(cuid())
  message     String
  createdAt   DateTime   @default(now())
  senderId    String
  sender      User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderName  String
  chatroomId  String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@index([senderId])
  @@index([chatroomId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
  @@index([messageId])
}

model Session {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  endedAt      DateTime?
  professeurId String
  participants User[]   @relation("SessionToParticipant")
}

enum Role {
  ELEVE
  PROFESSEUR
}
