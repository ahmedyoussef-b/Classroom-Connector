// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  name                String?
  role                Role      @default(ELEVE)
  ambition            String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  classeId            String?
  classe              Classe?   @relation("ElevesDeClasse", fields: [classeId], references: [id])
  etat                EtatEleve?
  
  classesEnseignees   Classe[]  @relation("ProfesseurDeClasse")
  sessionsCrees       Session[] @relation("SessionTeacher")
  sessionsParticipees Session[] @relation("SessionParticipants")
  
  messages            Message[]
  reactions           Reaction[]
}

model Classe {
  id            String    @id @default(cuid())
  nom           String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  professeurId  String
  professeur    User      @relation("ProfesseurDeClasse", fields: [professeurId], references: [id])
  eleves        User[]    @relation("ElevesDeClasse")
  chatroomId    String    @unique
  chatroom      Chatroom  @relation(fields: [chatroomId], references: [id])
}

model Metier {
  id          String    @id @default(cuid())
  nom         String
  description String
  icon        String?
  theme       Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  etatsEleves EtatEleve[]
}

model EtatEleve {
  id         String   @id @default(cuid())
  isPunished Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  eleveId    String   @unique
  eleve      User     @relation(fields: [eleveId], references: [id], onDelete: Cascade)
  metierId   String?
  metier     Metier?  @relation(fields: [metierId], references: [id])
}

model Session {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  endedAt       DateTime?

  // Relations
  professeurId  String
  professeur    User     @relation("SessionTeacher", fields: [professeurId], references: [id])
  participants  User[]   @relation("SessionParticipants")
}

model Chatroom {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  classe    Classe?
  messages  Message[]
}

model Message {
  id          String     @id @default(cuid())
  message     String
  senderId    String
  senderName  String
  createdAt   DateTime   @default(now())
  
  // Relations
  sender      User       @relation(fields: [senderId], references: [id])
  chatroomId  String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id])
  reactions   Reaction[]
}

model Reaction {
  id          String   @id @default(cuid())
  emoji       String
  createdAt   DateTime @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  messageId   String
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

enum Role {
  ELEVE
  PROFESSEUR
}
