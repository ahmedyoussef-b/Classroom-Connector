// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  name                    String?
  role                    Role      @default(ELEVE)
  classeEnseignee         Classe?   @relation("ProfesseurClasse")
  classe                  Classe?   @relation("ElevesClasse", fields: [classeId], references: [id])
  classeId                String?
  messages                Message[]
  etat                    EtatEleve?
  reactions               Reaction[]

  @@map("users")
}

enum Role {
  PROFESSEUR
  ELEVE
}

model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeur   User      @relation("ProfesseurClasse", fields: [professeurId], references: [id])
  professeurId String    @unique
  eleves       User[]    @relation("ElevesClasse")
  chatrooms    Chatroom[]

  @@map("classes")
}

model Metier {
  id          String   @id @default(cuid())
  nom         String
  description String
  theme       Json // Group all theme attributes into a single JSON field
  etatsEleves EtatEleve[]

  @@map("metiers")
}

model EtatEleve {
  id          String  @id @default(cuid())
  eleveId     String  @unique
  eleve       User    @relation(fields: [eleveId], references: [id])
  metierId    String?
  metier      Metier? @relation(fields: [metierId], references: [id])
  estPuni     Boolean @default(false)

  @@map("etats_eleves")
}

model Chatroom {
  id        String    @id @default(cuid())
  nom       String
  classe    Classe    @relation(fields: [classeId], references: [id])
  classeId  String
  messages  Message[]

  @@map("chatrooms")
}

model Message {
  id          String     @id @default(cuid())
  contenu     String
  envoyeA     DateTime   @default(now())
  auteur      User       @relation(fields: [auteurId], references: [id])
  auteurId    String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id])
  chatroomId  String
  reactions   Reaction[]

  @@map("messages")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  auteur    User     @relation(fields: [auteurId], references: [id])
  auteurId  String

  @@map("reactions")
}
