generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["accelerate"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  role            Role
  classeEnseignee Classe?   @relation("ProfesseurClasse")
  classe          Classe?   @relation("ElevesClasse")
  messages        Message[]
  reactions       Reaction[]

  @@map("users")
}

model Classe {
  id           String @id @default(cuid())
  nom          String
  professeurId String @unique
  professeur   User   @relation("ProfesseurClasse", fields: [professeurId], references: [id])
  eleves       User[] @relation("ElevesClasse")

  @@map("classes")
}

model Metier {
  id          String @id @default(cuid())
  nom         String
  description String
  theme       Json

  @@map("metiers")
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleveId    String  @unique
  metierId   String?
  isPunished Boolean @default(false)

  @@map("etats_eleves")
}

model Chatroom {
  id        String    @id @default(cuid())
  classeId  String
  messages  Message[]

  @@map("chatrooms")
}

model Message {
  id         String     @id @default(cuid())
  contenu    String
  auteurId   String
  auteur     User       @relation(fields: [auteurId], references: [id])
  chatroomId String
  chatroom   Chatroom   @relation(fields: [chatroomId], references: [id])
  timestamp  DateTime   @default(now())
  reactions  Reaction[]

  @@map("messages")
}

model Reaction {
  id        String  @id @default(cuid())
  emoji     String
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
  auteurId  String
  auteur    User    @relation(fields: [auteurId], references: [id])

  @@map("reactions")
}

enum Role {
  PROFESSEUR
  ELEVE
}
