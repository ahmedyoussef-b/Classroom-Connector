// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// User Model
model User {
  id                String      @id @default(cuid())
  email             String      @unique
  name              String?
  role              Role        @default(ELEVE)
  ambition          String?
  classeId          String?
  classe            Classe?     @relation(fields: [classeId], references: [id])
  sessions          Session[]   @relation("SessionParticipants")
  sessionsCrees     Session[]   @relation("SessionProfesseur")
  messages          Message[]
  reactions         Reaction[]
  classesEnseignees Classe[]    @relation("ProfesseurClasses")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  etat              EtatEleve?
}

// Student State Model
model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User    @relation(fields: [eleveId], references: [id])
  eleveId    String  @unique
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
  isPunished Boolean @default(false)
}

// Class Model
model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeur   User      @relation("ProfesseurClasses", fields: [professeurId], references: [id])
  professeurId String
  eleves       User[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  chatroom     Chatroom? @relation(fields: [chatroomId], references: [id])
  chatroomId   String?   @unique
}

// Career/Job Model
model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  icon        String
  theme       Json
  etatsEleves EtatEleve[]
}

// Session Model
model Session {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  endedAt       DateTime?
  professeur    User     @relation("SessionProfesseur", fields: [professeurId], references: [id])
  professeurId  String
  participants  User[]   @relation("SessionParticipants")
}

// Chatroom Model
model Chatroom {
  id        String    @id @default(cuid())
  messages  Message[]
  classe    Classe?
}

// Message Model
model Message {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  message     String
  sender      User       @relation(fields: [senderId], references: [id])
  senderId    String
  senderName  String
  chatroom    Chatroom   @relation(fields: [chatroomId], references: [id])
  chatroomId  String
  reactions   Reaction[]
}

// Reaction Model
model Reaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  emoji     String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ELEVE
  PROFESSEUR
}
