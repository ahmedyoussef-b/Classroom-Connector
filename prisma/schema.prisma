// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  ambition        String?
  role            Role         @default(ELEVE)
  etat            EtatEleve?   @relation(fields: [etatId], references: [id])
  etatId          String?      @unique
  // Un utilisateur peut être un professeur pour plusieurs classes
  classeEnseignee Classe[]     @relation("professeur")
  // Un élève appartient à une seule classe
  classe          Classe?      @relation("eleves", fields: [classeId], references: [id])
  classeId        String?
  messages        Message[]
  reactions       Reaction[]
}

model Classe {
  id           String    @id @default(cuid())
  nom          String
  professeur   User?     @relation("professeur", fields: [professeurId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  professeurId String?   @unique
  eleves       User[]    @relation("eleves")
  chatroomId   String    @unique @default(cuid())
}

model Metier {
  id          String      @id @default(cuid())
  nom         String
  description String
  theme       Json // Store theme-related data like colors, icons, etc.
  etats       EtatEleve[]
}

model EtatEleve {
  id         String  @id @default(cuid())
  eleve      User?
  metier     Metier? @relation(fields: [metierId], references: [id])
  metierId   String?
  isPunished Boolean @default(false)
}

model Message {
  id          String     @id @default(cuid())
  message     String
  createdAt   DateTime   @default(now())
  sender      User       @relation(fields: [senderId], references: [id])
  senderId    String
  senderName  String
  chatroomId  String
  reactions   Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String
}

enum Role {
  ELEVE
  PROFESSEUR
}
